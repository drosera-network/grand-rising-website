---
import { Image } from "astro:assets";
import droseraLogo from "../images/drosera-log.svg";

// Navbar component props can be defined here
interface Props {
  activeSection?: "vision" | "traps" | "developers" | "home";
}

const { activeSection = "home" } = Astro.props;
---

<nav
  class="fixed top-0 left-0 right-0 z-50 bg-black text-white"
>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between h-16">
      <!-- Navigation Links - Center -->
      <div
        class="hidden md:flex md:items-center justify-between w-full text-[20px] "
      >
        <a href="/" class="flex-shrink-0 flex items-center">
          <Image src={droseraLogo} alt="DROSERA" class="h-8 w-[134px]" />
        </a>
        <a
          href="#vision"
          class={`px-3 py-2 font-ndot uppercase relative text-white hover:text-orange-500`}
        >
          Vision
          {
            activeSection === "vision" && (
              <span class="absolute bottom-0 left-0 w-full h-0.5 bg-orange-500" />
            )
          }
        </a>
        <a
          href="#traps"
          class={`px-3 py-2 font-ndot uppercase relative text-white hover:text-orange-500`}
        >
          Traps
          {
            activeSection === "traps" && (
              <span class="absolute bottom-0 left-0 w-full h-0.5 bg-orange-500" />
            )
          }
        </a>
        <a
          href="#developers"
          class={`px-3 py-2 font-ndot uppercase relative text-white hover:text-orange-500`}
        >
          Developers
          {
            activeSection === "developers" && (
              <span class="absolute bottom-0 left-0 w-full h-0.5 bg-orange-500" />
            )
          }
        </a>
      </div>

      <!-- Right side - empty for balance -->
      <div class="hidden md:flex md:items-center">
        <!-- Placeholder to maintain layout balance -->
      </div>

      <!-- Mobile menu button -->
      <div class="flex items-center md:hidden">
        <button
          type="button"
          class="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-white focus:outline-none"
          aria-expanded="false"
          id="mobile-menu-button"
        >
          <span class="sr-only">Open main menu</span>
          <!-- Menu icon -->
          <svg
            class="block h-6 w-6"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            aria-hidden="true"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu, show/hide based on menu state -->
  <div class="hidden md:hidden" id="mobile-menu">
    <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3">
      <a
        href="#vision"
        class={`block px-3 py-2 text-base font-ndot uppercase ${activeSection === "vision" ? "text-white border-l-4 border-orange-500 pl-2" : "text-gray-400 hover:text-white"}`}
      >
        Vision
      </a>
      <a
        href="#traps"
        class={`block px-3 py-2 text-base font-ndot uppercase ${activeSection === "traps" ? "text-white border-l-4 border-orange-500 pl-2" : "text-gray-400 hover:text-white"}`}
      >
        Traps
      </a>
      <a
        href="#developers"
        class={`block px-3 py-2 text-base font-ndot uppercase ${activeSection === "developers" ? "text-white border-l-4 border-orange-500 pl-2" : "text-gray-400 hover:text-white"}`}
      >
        Developers
      </a>
    </div>
  </div>
</nav>

<script is:inline>
  // Wait for the DOM to be fully loaded
  document.addEventListener("DOMContentLoaded", function () {
    // Mobile menu toggle
    var mobileMenuButton = document.getElementById("mobile-menu-button");
    var mobileMenu = document.getElementById("mobile-menu");

    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener("click", function () {
        mobileMenu.classList.toggle("hidden");
      });
    }

    // Smooth scrolling for anchor links
    var anchorLinks = document.querySelectorAll('a[href^="#"]');
    anchorLinks.forEach(function (anchor) {
      anchor.addEventListener("click", function (e) {
        e.preventDefault();

        var href = this.getAttribute("href");
        if (href === "#") return;

        var targetElement = document.querySelector(href);
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: "smooth",
            block: "start",
          });
        }
      });
    });
  });
</script>

